{
  "name": "Turn Spreadsheets Into Charts & Graphics",
  "nodes": [
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "b4a90e30-4444-4dc2-b4fc-ff916f49512f",
      "name": "Aggregate1",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2928,
        1264
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "749d8536-c99c-4482-977c-bf0aa3382d93",
      "name": "Summarize1",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        -2720,
        1264
      ]
    },
    {
      "parameters": {
        "operation": "xls",
        "options": {}
      },
      "id": "e62993f7-374b-4fc4-a2f6-6fe3cf0e21f1",
      "name": "Extract from Excel",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -3136,
        1264
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $json.file_link}}",
                    "rightValue": ".xls",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Excel Spreadsheet 1"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7ddfa924-1c26-4ee3-9890-5c9d2b96717a",
                    "leftValue": "={{ $json.file_link}}",
                    "rightValue": ".xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Excel Spreadsheet 2"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f53caf8b-7a8f-4d1e-98f4-deaf0e0171f0",
                    "leftValue": "={{ $json.file_link}}",
                    "rightValue": ".csv",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CSV Spreadsheet"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "1ade7ece-47fe-47a8-8a81-16284388dace",
                    "leftValue": "={{ $json.file_link}}",
                    "rightValue": "/spreadsheets/",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Google Spreadsheet"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "00ac56d4-5ea8-4664-ae15-81b1b6a52168",
                    "leftValue": "={{ $json.file_link}}",
                    "rightValue": "drive.google.com",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Drive Files"
            }
          ]
        },
        "options": {}
      },
      "id": "d846d210-dd92-4e30-a905-8d6097d3cbce",
      "name": "Switch2",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -3888,
        1744
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -3136,
        1456
      ],
      "id": "a77b3076-0292-424b-8127-ee2198e0f0ed",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -3136,
        1664
      ],
      "id": "c81df925-1097-4864-9716-6f826d94c3c1",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "dd8e7414-2827-4908-b5ab-2498fee3ce29",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2928,
        1456
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "3612fa6e-ee76-4f2f-a06d-098e28b11e22",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        -2720,
        1456
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "b07c0f97-987a-4288-85a1-71c9412ec933",
      "name": "Aggregate2",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2928,
        1664
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "4c6faeb5-89b1-4cd6-ba0a-bff41a340b60",
      "name": "Summarize2",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        -2720,
        1664
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=**The User's Current Request:** {{ $('Landmark').item.json.user_current_input }}\n\n**The Conversation History With The User:** {{ $('Landmark').item.json.previous_conversation_history }}\n\n**The Charts & Their Links To Give To The User:**\n{{ $json.data.map(item => `${item.title} - ${item.image_link}`).join('\\n') }}",
        "options": {
          "systemMessage": "=<system_prompt>\n\nYOU ARE A FRIENDLY CONFIRMATION AGENT.\n\n## OBJECTIVE\n\nWHEN ACTIVATED, YOU MUST:\n\n- CONFIRM FOR THE USER THAT THEIR CHARTS OR GRAPHS HAVE BEEN SUCCESSFULLY CREATED.\n- DELIVER THE TITLES AND LINKS TO THE USER IN A HELPFUL, WARM, AND CLEAR MANNER.\n- USE POSITIVE, REASSURING, AND PROFESSIONAL LANGUAGE.\n- AVOID TECHNICAL OR SYSTEM VOCABULARY AND ANY EXCESSIVE FORMALITY.\n\n---\n\n## INSTRUCTIONS\n\n- BEGIN WITH A WELCOMING, POSITIVE CONFIRMATION (e.g., \"Your charts are ready!\").\n- PRESENT THE LIST OF CHARTS/GRAPHS, SHOWING EACH TITLE ALONGSIDE ITS LINK.\n    - FOR MULTIPLE ITEMS, USE LINE BREAKS OR BULLET POINTS.\n    - FOR A SINGLE ITEM, PRESENT THE TITLE AND LINK CLEARLY.\n- KEEP YOUR RESPONSE SHORT, SUPPORTIVE, AND DIRECT.\n- DO NOT INCLUDE UNNECESSARY TECHNICAL DETAILS, INTERNAL STATUS, OR SYSTEM JARGON.\n\n---\n\n## WHAT NOT TO DO\n\n- DO NOT USE OR IMPLY A CHARACTER, EXCESSIVE FORMALITY, OR STERILE ROBOTIC LANGUAGE.\n- DO NOT DESCRIBE OR EXPLAIN THE CREATION OR STORAGE PROCESS.\n- DO NOT INCLUDE SYSTEM-RELATED VOCABULARY (e.g., “uploaded,” “synced,” “database,” etc.).\n- DO NOT INCLUDE TIMESTAMPS, FILE NAMES, OR INTERNAL REFERENCES.\n- DO NOT OFFER INSTRUCTIONS, NEXT STEPS, OR UNSOLICITED ADVICE.\n\n---\n\n## RESPONSE TEMPLATE (GUIDELINE)\n\nYour charts are ready!\n\n[If multiple items:]\n- [Chart Title 1]: [Link 1]\n- [Chart Title 2]: [Link 2]\n- [Chart Title 3]: [Link 3]\n\n[If only one item:]\n[Chart Title]: [Link]\n\nIf you need anything else, just let me know.\n\n</system_prompt>"
        }
      },
      "id": "c55952f8-bce3-46b7-ad16-c2ac5b76bba9",
      "name": "Let User Know Upload Complete",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -4864,
        1312
      ]
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_rodger_chat",
          "mode": "list",
          "cachedResultName": "n8n_rodger_chat"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "session_id": "={{ $('Landmark').item.json.session_id }}",
            "message": "={\n  \"type\": \"Bot\",\n  \"data\": {\n    \"content\": \"{{ $('Message: User').item.json.message.text.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\\\"').replace(/{/g, '\\\\{').replace(/}/g, '\\\\}').replace(/\\n/g, '\\\\n').replace(/\\r/g, '') }}\",\n    \"respondingTo\": \"{{ $('Landmark').item.json.user_id }}\",\n    \"previousConversationChain\": \"graphs\",\n    \"timeAdded\": \"{{ $now }}\"\n  }\n}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "message",
              "displayName": "message",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4192,
        1312
      ],
      "id": "2f2edf68-caa4-4331-926c-96ddfa755dec",
      "name": "Update Thread Memory Session",
      "credentials": {
        "postgres": {
          "id": "PsARREIXEOG7p5ku",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_rodger_chat",
          "mode": "list",
          "cachedResultName": "n8n_rodger_chat"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "session_id": "={{ $('Landmark').item.json.session_id }}",
            "message": "={\n  \"type\": \"human\",\n  \"data\": {\n    \"content\": \"{{ $('Landmark').first().json.user_current_input.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\\\"').replace(/{/g, '\\\\{').replace(/}/g, '\\\\}').replace(/\\n/g, '\\\\n').replace(/\\r/g, '') }}\",\n    \"TimeAdded\": \"{{ $now }}\"\n  }\n}\n"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "message",
              "displayName": "message",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4352,
        1312
      ],
      "id": "c679b539-627c-40ad-8ae1-3d80839e7eda",
      "name": "Update Thread Memory Session14",
      "credentials": {
        "postgres": {
          "id": "PsARREIXEOG7p5ku",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.file_link}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3568,
        1264
      ],
      "id": "393aaba7-cedd-41d2-b509-367f2e4edc66",
      "name": "Download File2",
      "credentials": {
        "slackOAuth2Api": {
          "id": "SMZHJs3a87a9qsPV",
          "name": "Slack OAuth2"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.file_link}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3568,
        1456
      ],
      "id": "773015f2-91b2-4819-853a-2918e11f1e44",
      "name": "Download File3",
      "credentials": {
        "slackOAuth2Api": {
          "id": "SMZHJs3a87a9qsPV",
          "name": "Slack OAuth2"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.file_link}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3568,
        1664
      ],
      "id": "b48b1199-d086-4821-8970-2d5f23a06dfe",
      "name": "Download File4",
      "credentials": {
        "slackOAuth2Api": {
          "id": "SMZHJs3a87a9qsPV",
          "name": "Slack OAuth2"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_link}}",
          "mode": "url"
        },
        "options": {
          "binaryPropertyName": "data",
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3568,
        1856
      ],
      "id": "47465313-0063-4abb-8cb4-1147559f1089",
      "name": "Download File5",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "6b09vfNjQ0BTsy8h",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc",
          "mode": "list",
          "cachedResultName": "Rodger File Links",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "File Links",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Message Timestamp",
              "lookupValue": "={{ $('Landmark').item.json.files_ts }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -5088,
        1792
      ],
      "id": "a959bc9a-f823-465b-852c-bb9fce1c4c92",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "gbV7ZDvk1w563Bec",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_link}}",
          "mode": "url"
        },
        "options": {
          "binaryPropertyName": "data",
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3568,
        2048
      ],
      "id": "05874420-ba04-4b8d-8df3-12be9f0a24c9",
      "name": "Download File7",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "6b09vfNjQ0BTsy8h",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08CE2WBQR3",
          "mode": "list",
          "cachedResultName": "patty_pa_input"
        },
        "text": "={{ $json.output }}",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "link_names": true,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Landmark').first().json.ts }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -4528,
        1312
      ],
      "id": "e81e9665-3574-4a35-a3da-7fbece05d995",
      "name": "Message: User",
      "webhookId": "bdf335db-f3b7-41cf-8641-88d0f607ed70",
      "credentials": {
        "slackApi": {
          "id": "ncQHsmHkvcVCSFNi",
          "name": "Patty_PA_Bot API"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $binary.data.fileExtension}}",
                    "rightValue": "xls",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Excel Spreadsheet 1"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7ddfa924-1c26-4ee3-9890-5c9d2b96717a",
                    "leftValue": "={{ $binary.data.fileExtension}}",
                    "rightValue": "xlsx",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Excel Spreadsheet 2"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f53caf8b-7a8f-4d1e-98f4-deaf0e0171f0",
                    "leftValue": "={{ $binary.data.fileExtension}}",
                    "rightValue": "csv",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CSV Spreadsheet"
            }
          ]
        },
        "options": {}
      },
      "id": "c892b656-e2be-453e-b09c-920970670fc0",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -3376,
        2032
      ]
    },
    {
      "parameters": {
        "content": "# OpenAI",
        "height": 228,
        "width": 528,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2000,
        64
      ],
      "typeVersion": 1,
      "id": "284d90a6-ad62-4cab-a726-7a75b4d118c3",
      "name": "Sticky Note31"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1792,
        144
      ],
      "id": "b9072314-7b93-44d7-92d6-ac57b45fcaa4",
      "name": "4.1-mini",
      "credentials": {
        "openAiApi": {
          "id": "AG2i36rIlQJn1Cj3",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fc4bfa6e-4679-44cb-8223-41c2f52fd2e5",
              "leftValue": "={{ $json.output.style }}",
              "rightValue": "undefined",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "d08d33eb-0e1d-4249-89c2-aadfd695b584",
              "leftValue": "={{ $json.output.chart_content }}",
              "rightValue": "undefined",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "df40af4c-41b4-4434-bbb2-6bdeb3ad06c3",
              "leftValue": "={{ $json.output.approval }}",
              "rightValue": "no",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1680,
        672
      ],
      "id": "dd199e2a-d8a2-4821-b8a8-447b549aa78c",
      "name": "If"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08CE2WBQR3",
          "mode": "list",
          "cachedResultName": "patty_pa_input"
        },
        "text": "={{ $json.output }}",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "link_names": true,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Landmark').item.json.ts }}"
            }
          }
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -1168,
        416
      ],
      "id": "370d3677-b7ea-40e2-8561-430496024aab",
      "name": "Message: User 1",
      "webhookId": "e9cf8f97-c0ec-487b-aeb2-959979708d57",
      "credentials": {
        "slackApi": {
          "id": "ncQHsmHkvcVCSFNi",
          "name": "Patty_PA_Bot API"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_rodger_chat",
          "mode": "list",
          "cachedResultName": "n8n_rodger_chat"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "session_id": "={{ $('Landmark').item.json.user_id }}:{{ $('Message: User 1').item.json.message.thread_ts }}",
            "message": "={\n  \"type\": \"human\",\n  \"data\": {\n    \"content\": \"{{ $('Landmark').item.json.user_current_input.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\\\"').replace(/{/g, '\\\\{').replace(/}/g, '\\\\}').replace(/\\n/g, '\\\\n').replace(/\\r/g, '') }}\",\n    \"TimeAdded\": \"{{ $now }}\"\n  }\n}\n"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "message",
              "displayName": "message",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1008,
        416
      ],
      "id": "477e2806-77d4-45e4-8070-5dc7132a656c",
      "name": "Update Thread Memory Session6",
      "credentials": {
        "postgres": {
          "id": "PsARREIXEOG7p5ku",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=**Current User Request:** {{ $json.user_current_input }}\n\n**Previous Conversations:** {{ $json.previous_conversation_history }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=<system_prompt>\n\nYOU ARE AN ELITE INFORMATION EXTRACTION AND FORMATTING ALGORITHM FOR N8N AUTOMATIONS, SPECIALIZED IN CHART SPECIFICATION PARSING.\n\nYOUR CORE FUNCTION IS TO:\n\nEXTRACT AND NORMALIZE PRECISE CHART REQUESTS FROM THE USER'S CURRENT REQUEST AND PREVIOUS CONVERSATIONS.\n\nCLEAN AND FORMAT THE EXTRACTED DATA INTO A STRUCTURED JSON OBJECT, ADHERING TO PROFESSIONAL FORMATTING.  \n**STYLE** MUST BE MAPPED TO AN EXACT [QUICKCHART.IO CHART TYPE], OR \"gantt\" IF A GANTT CHART IS REQUESTED:  \n- \"bar\"\n- \"pie\"\n- \"doughnut\"\n- \"bubble\"\n- \"line\"\n\n---\n\n## OBJECTIVE\n\nYOUR TASK IS TO EXTRACT THE FOLLOWING ATTRIBUTES:\n\n- style\n- chart_content\n- approval\n\n**WHERE:**\n\n- **style** = The chart type requested, **MUST BE** one of:  \n  \"bar\", \"pie\", \"doughnut\", \"bubble\", \"line\".  \n  - Only these values are valid.  \n  - Map common phrases or synonyms (e.g. \"Bar Chart\", \"Graph\", \"Circle Chart\") to the correct type.\n  - If no valid style is found, return style: undefined.\n\n- **chart_content** = A clear, detailed summary of *exactly* how the user wants the data presented (axes, labels, breakdowns, variables, grouping, etc.).  \n  - Return as undefined if not found or ambiguous.\n\n- **approval** = \"yes\" or \"no\" depending on user’s explicit approval.\n\n---\n\n## EXTRACTION & FORMATTING RULES\n\n**CHAIN OF THOUGHTS:**\n1. **UNDERSTAND:** Review the User’s Current Request and all Previous Conversations.\n2. **BASICS:** Identify chart type, variables, axes, groupings, and special instructions.\n3. **NORMALIZE STYLE:**  \n   - Map common chart/graph/table phrases to one of these styles:  \n     - \"bar\"  \n     - \"pie\"  \n     - \"doughnut\"  \n     - \"bubble\"  \n     - \"line\"  \n   - For example:  \n     - \"bar graph\", \"bar chart\" ⇒ \"bar\"  \n     - \"pie chart\" ⇒ \"pie\"  \n     - \"doughnut chart\", \"donut chart\" ⇒ \"doughnut\"  \n     - \"bubble chart\" ⇒ \"bubble\"  \n     - \"line graph\", \"line chart\" ⇒ \"line\"  \n   - If style does not match, set as undefined.\n\n4. **BUILD:**  \n   - **style:** (lowercase string from above list, or undefined)  \n   - **chart_content:** (professional, clear, detailed; undefined if not found)  \n   - **approval:** (\"yes\" or \"no\" per rules below)\n\n5. **EDGE CASES:**  \n   - If style or chart_content are missing or ambiguous, return as undefined.  \n   - For approval, only \"yes\" or \"no\" (never undefined; default to \"no\" if unclear).\n\n6. **FINAL ANSWER:**  \n   - Output only a structured JSON object as specified.\n\n---\n\n## ATTRIBUTE INSTRUCTIONS\n\n- **IDENTIFY STYLE:**\n    - Extract the most specific chart or graph type mentioned.\n    - Normalize to one of: \"bar\", \"pie\", \"doughnut\", \"bubble\", \"line\".\n    - If no valid style found, style: undefined.\n\n- **IDENTIFY CHART_CONTENT:**\n    - Comprehensive, detailed description of visualization (axes, variables, breakdowns, etc.).\n    - If missing or ambiguous, chart_content: undefined.\n\n- **DETERMINE APPROVAL:**\n    - Only \"yes\" or \"no\".\n    - \"yes\" if the user has clearly approved the style and chart_content.\n    - \"no\" if the user requests changes, is uncertain, or has not given clear approval.\n    - Never undefined.\n\n---\n\n## OUTPUT FORMAT\n\nReturn ONLY the following structured JSON:\n{\n    \"style\": \"[bar|pie|doughnut|bubble|line|undefined]\",\n    \"chart_content\": \"[Extracted chart content or undefined]\",\n    \"approval\": \"[yes or no]\"\n}\n\n---\n\n## WHAT NOT TO DO\n\n- DO NOT fabricate, guess, or infer information not present in the User's Current Request or Previous Conversations.\n- NEVER use any style except the approved types above.\n- NEVER extract from outside the User's Current Request or Previous Conversations.\n- NEVER return approval as undefined.\n- NEVER return style or chart_content in all lowercase, unformatted, or with missing detail.\n- NEVER change the intended meaning of the user’s request.\n- NEVER output anything outside the specified JSON format.\n\n---\n\n## EXAMPLES\n\nExample 1\n\nPrevious Conversation:  \nUser: Please create a bar chart for department headcounts.\n\nCurrent Request:  \nUser: Proceed.\n\nExtracted:  \n{\n    \"style\": \"Bar\",\n    \"chart_content\": \"Department Headcounts as Bars, Each Department on the X Axis, Headcount on the Y Axis\",\n    \"approval\": \"yes\"\n}\n\nExample 3\n\nPrevious Conversation:  \nUser: Make a bubble chart showing customer age (x), purchase amount (y), and number of purchases (bubble size).\n\nCurrent Request:  \nUser: Go ahead with that.\n\nExtracted:  \n{\n    \"style\": \"bubble\",\n    \"chart_content\": \"Plot Each Customer with Age on X Axis, Purchase Amount on Y Axis, and Bubble Size by Number of Purchases\",\n    \"approval\": \"yes\"\n}\n\n\n</system_prompt>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -1984,
        672
      ],
      "id": "bff56213-6d5f-46b6-8cce-e90e8cf2d911",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"style\": \"Bar Graph\",\n\t\"chart_content\": \"Have the x axis be our product lines and the y axis be our monthly revenue\",\n    \"approval\": \"yes\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1808,
        832
      ],
      "id": "7e85a6e3-4f69-4686-8cba-f22e47f3b195",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2bf97764-c1c7-42e9-bcef-5e2e951849f9",
              "name": "previous_conversation_history",
              "value": "={{ $json.message.data.content }}",
              "type": "string"
            },
            {
              "id": "cf6a66e0-1a68-486c-ba5f-fc50ae2c849c",
              "name": "user_current_input",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "f5f6770e-301a-40ac-ae3e-a094e2232138",
              "name": "session_id",
              "value": "={{ $json.session_id }}",
              "type": "string"
            },
            {
              "id": "c912e233-7f68-4a6e-b5a0-d39ad5fdae1b",
              "name": "ts",
              "value": "={{ $json.ts }}",
              "type": "string"
            },
            {
              "id": "d8c967e6-b7c0-4e98-91a9-30e64b0ace27",
              "name": "user_id",
              "value": "={{ $json.user }}",
              "type": "string"
            },
            {
              "id": "152e69ac-6ab8-47e3-b86c-22e614f27163",
              "name": "files_ts",
              "value": "={{ $json.message.data.files_ts || $('Mini-Landmark').item.json.ts}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2144,
        672
      ],
      "id": "8c3e6614-6b72-4807-8027-0f83e6797521",
      "name": "Landmark"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=**Current User Request:** {{ $('Landmark').item.json.user_current_input }}\n\n**Previous Conversations:** {{ $('Landmark').item.json.previous_conversation_history }}\n\n**What Our AI Agent Sees As The Style Of Chart:** {{ $json.output.style }}\n\n**What Our AI Agent Sees As The Chart Content Details:** {{ $json.output.chart_content }}",
        "options": {
          "systemMessage": "=<system_prompt>\n\nYOU ARE A PROFESSIONAL, POLISHED, AND EFFICIENT CHART CREATION COORDINATOR — TASKED WITH ENSURING CLEAR COMMUNICATION BETWEEN THE USER AND THE DATA VISUALIZATION TEAM. YOU OPERATE WITH CALM CLARITY, FOCUSING ON ACCURACY, COMPLETENESS, AND READINESS.\n\n## ROLE\n\nHELP THE USER CONFIRM OR CLARIFY THEIR CHART/GRAPH REQUEST, COLLECT ANY MISSING INFORMATION, AND REQUEST FINAL APPROVAL TO PROCEED WITH THE CHART CREATION.\n\n## MISSION\n\nREVIEW:\n\n- User’s Current Message.\n- Previous Conversations.\n- The information extractor’s data pull, which provides:\n  - style (chart or graph type, e.g., Bar Graph, Pie Chart)\n  - chart_content (how the data should be visualized and laid out)\n  - approval status\n\n## RESTATE THE CHART REQUEST\n\n- RESTATE the chart type (style) and the detailed chart_content *exactly as provided* or as most recently stated.\n- ALWAYS FORMAT THE STYLE IN TITLE CASE:\n  - Capitalize the first letter of each major word.\n  - Do not capitalize short conjunctions or prepositions unless they are the first word.\n- Do not embellish, paraphrase, or rewrite the style or chart_content beyond minor corrections for clarity or grammar.\n- IF the chart_content could benefit from clarification, OFFER a brief, polite suggestion on how it might be improved.\n\n## CHECK FOR MISSING INFORMATION\n\n- IF style is 'undefined', ASK the user: What type of chart or graph would you like to create (e.g., Bar Graph, Pie Chart, Table, etc.)?\n- IF chart_content is 'undefined', ASK the user: Could you specify exactly how you want the data presented? For example: which variables go on which axis, how the data should be grouped or compared, or any specific labels or breakdowns you want.\n\n## SEEK APPROVAL\n\n- IF BOTH the style and chart_content are clearly defined, PRESENT them to the user and ask:\n  - Are we ready to proceed with creating your chart?\n\n## WHEN RESPONDING\n\n- DISPLAY THE RESTATED CHART REQUEST CLEARLY:\n  - Introduce it as: Here’s what I understand you want to create:\n  - Place both the Style and Chart Content between two lines of three dashes (---) above and below the text.\n- After stating the assumed chart request, suggest improvements in a polite, conversational tone if appropriate.\n\n- ONLY ASK FOR MISSING DETAILS IF THEY ARE NOT ALREADY PROVIDED:\n  - IF style is undefined: What type of chart or graph would you like to create (e.g., Bar Graph, Pie Chart, Table, etc.)?\n  - IF chart_content is undefined: Could you specify exactly how you want the data presented? For example: which variables go on which axis, how the data should be grouped or compared, or any specific labels or breakdowns you want.\n\n- IF BOTH ARE COMPLETE, ask for approval directly:\n  - Are we ready to proceed with creating your chart?\n\n## STYLE RULES\n\n- Speak directly to the user in a clear, courteous, and professional tone.\n- Maintain a consistent and neutral personality without unnecessary flair or stylistic affectation.\n- If you must 'quote' anything, use single 'marks' or single dashes — NEVER use standard quotation marks (“ ”).\n- NEVER break character or speak as an AI.\n- Always ensure the Style is presented in clean, professional Title Case formatting.\n- Always ensure chart_content is presented in a clear, detailed, and professional style.\n\n## WHAT NOT TO DO\n\n- Do not embellish or rewrite the Style or Chart Content with unnecessary flair.\n- Do not add narrative text (e.g., 'The assistant appears...').\n- Do not use standard quotation marks (“ ”).\n- Do not make generic or robotic requests — keep them personable and polished.\n- Do not ask for approval if either the Style or Chart Content is still undefined.\n- Do not present the Style in lowercase or sentence case — Title Case only.\n- **Do not ask for chart details again if they have already been provided and clearly defined.**\n\n## RESPONSE TEMPLATE (GUIDELINE)\n\nHere’s what I understand you want to create:  \n---  \nStyle: [Restated Style in Title Case]  \nChart Content: [Restated chart_content, as provided, with minor corrections if needed]  \n---  \n[If clarification is needed]: If I’ve misunderstood or if you'd like to refine this visualization further, just let me know.\n\n[If Style is undefined]: What type of chart or graph would you like to create (e.g., Bar Graph, Pie Chart, Table, etc.)?\n\n[If Chart Content is undefined]: Could you specify exactly how you want the data presented? For example: which variables go on which axis, how the data should be grouped or compared, or any specific labels or breakdowns you want.\n\n[If both are clearly defined]: Are we ready to proceed with creating your chart?\n\nToday’s date is {{ $today }}.\n\n</system_prompt>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -1472,
        416
      ],
      "id": "117c6f4a-d88a-4df5-a891-e016460b4835",
      "name": "Review and approval"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_rodger_chat",
          "mode": "list",
          "cachedResultName": "n8n_rodger_chat"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "session_id": "={{ $('Landmark').item.json.user_id }}:{{ $('Message: User 1').item.json.message.thread_ts }}",
            "message": "={\n  \"type\": \"Bot\",\n  \"data\": {\n    \"content\": \"{{ $('Message: User 1').item.json.message.text.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\\\"').replace(/{/g, '\\\\{').replace(/}/g, '\\\\}').replace(/\\n/g, '\\\\n').replace(/\\r/g, '') }}\",\n    \"respondingTo\": \"{{ $('Landmark').item.json.user_id }}\",\n    \"previousConversationChain\": \"graphs\",\n    \"files_ts\": \"{{ $('Landmark').item.json.files_ts }}\",\n    \"timeAdded\": \"{{ $now }}\"\n  }\n}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "message",
              "displayName": "message",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -848,
        416
      ],
      "id": "3d348f3c-bef4-4f3b-b7cb-0457ee994ff6",
      "name": "Update Thread Memory Session1",
      "credentials": {
        "postgres": {
          "id": "PsARREIXEOG7p5ku",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -3904,
        352
      ],
      "id": "bf5964af-3c66-4758-8486-01403354b7da",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "AG2i36rIlQJn1Cj3",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "61b72c73-27c7-4ffd-873c-f066b032f04b",
                    "leftValue": "={{ $json.audio[0].filetype }}",
                    "rightValue": "m4a",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2b158d3b-2ab9-41d0-a167-957cb545763b",
                    "leftValue": "={{ $('Initial Processing').item.json.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.others}}",
                    "rightValue": "image",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "60887514-aecc-427b-9885-d4e2426c5567"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Has Other Files"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c50d8cb2-02a4-4896-8e0c-2a0723c9bc3e",
                    "leftValue": "={{$json.driveFiles}}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Has Drive Links"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4448,
        368
      ],
      "id": "e037380e-baaa-40a7-b881-fbd8f7baee7e",
      "name": "Switch1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7df2a11f-058b-4132-86de-582d3b2c8bd1",
              "leftValue": "={{ $json.audio }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4672,
        608
      ],
      "id": "7979a6f6-573b-4ef6-9924-d80e2e4adf5c",
      "name": "If audio"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2d6f7e8d-65be-48f5-90a0-83c86c1a8a6a",
              "name": "files",
              "value": "={{ $json.others }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4096,
        656
      ],
      "id": "d0b2d0c1-de33-48d9-96d0-5cd0d5731a78",
      "name": "Process Other Files"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2d6f7e8d-65be-48f5-90a0-83c86c1a8a6a",
              "name": "files",
              "value": "={{ $json.driveFiles }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4096,
        848
      ],
      "id": "983a3cbb-73dd-48ce-a4ee-2278f50a82b0",
      "name": "Process Drive Links"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e21d5b0b-2e72-4b5b-a292-a11bce246b66",
              "name": "text",
              "value": "={{ $('Initial Processing').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4096,
        496
      ],
      "id": "c1a529ed-409e-4600-aee6-47963608d99b",
      "name": "Set Text"
    },
    {
      "parameters": {
        "url": "={{ $json.audio[0].url_private_download }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "binary"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4096,
        352
      ],
      "id": "9ab70c0f-f2b5-440a-80b5-02c33fdd0754",
      "name": "Process Audio",
      "credentials": {
        "slackOAuth2Api": {
          "id": "SMZHJs3a87a9qsPV",
          "name": "Slack OAuth2"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc",
          "mode": "list",
          "cachedResultName": "Rodger File Links",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "File Links",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Message Timestamp": "={{ $('Initial Processing').item.json.ts }}",
            "File URL": "={{ $json.url_private_download }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Message Timestamp",
              "displayName": "Message Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "File URL",
              "displayName": "File URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Is Drive Link?",
              "displayName": "Is Drive Link?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "File Disposition",
              "displayName": "File Disposition",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "End Result",
              "displayName": "End Result",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Twitter ID",
              "displayName": "Twitter ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Twitter Posted?",
              "displayName": "Twitter Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Instagram ID",
              "displayName": "Instagram ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Instagram Posted?",
              "displayName": "Instagram Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Instagram Drafted",
              "displayName": "Instagram Drafted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Facebook ID",
              "displayName": "Facebook ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Facebook Posted?",
              "displayName": "Facebook Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Reddit ID",
              "displayName": "Reddit ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Reddit Posted?",
              "displayName": "Reddit Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LinkedIn ID",
              "displayName": "LinkedIn ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LinkedIn Posted?",
              "displayName": "LinkedIn Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -3728,
        656
      ],
      "id": "e295eb5a-91ff-432c-8fa0-1087e721536e",
      "name": "Log Files",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "gbV7ZDvk1w563Bec",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc",
          "mode": "list",
          "cachedResultName": "Rodger File Links",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "File Links",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W_7J3N__30N0HYec81fqZpV9Q9FEiYF3-cFEN8hB4Cc/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Message Timestamp": "={{ $('Initial Processing').item.json.ts }}",
            "File URL": "={{ $json.url }}",
            "Is Drive Link?": "yes"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Message Timestamp",
              "displayName": "Message Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "File URL",
              "displayName": "File URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Is Drive Link?",
              "displayName": "Is Drive Link?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "File Disposition",
              "displayName": "File Disposition",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "End Result",
              "displayName": "End Result",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Twitter ID",
              "displayName": "Twitter ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Twitter Posted?",
              "displayName": "Twitter Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Instagram ID",
              "displayName": "Instagram ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Instagram Posted?",
              "displayName": "Instagram Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Instagram Drafted",
              "displayName": "Instagram Drafted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Facebook ID",
              "displayName": "Facebook ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Facebook Posted?",
              "displayName": "Facebook Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Reddit ID",
              "displayName": "Reddit ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Reddit Posted?",
              "displayName": "Reddit Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LinkedIn ID",
              "displayName": "LinkedIn ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LinkedIn Posted?",
              "displayName": "LinkedIn Posted?",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -3728,
        848
      ],
      "id": "9762bedc-b794-402d-8a72-a7b678da510c",
      "name": "Log Drive Links",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "gbV7ZDvk1w563Bec",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// grab the incoming Slack “files” array and the message text\nconst event = $json;\nconst files = Array.isArray(event.files) ? event.files : [];\nconst text  = event.text || \"\";\n\n// 1) extract audio files\nconst audio = files.filter(f => f.mimetype?.startsWith(\"audio/\"));\n\n// 2) bundle up all non-audio into “others”\nconst others = files.filter(f => !f.mimetype?.startsWith(\"audio/\"));\n\n// 3) scan the text for Google Drive + Docs links\nconst driveRegex = /https:\\/\\/(?:drive|docs)\\.google\\.com\\/[^\\s<]+/g;\nconst driveUrls = Array.from(new Set(text.match(driveRegex) || []));\nconst driveFiles = driveUrls.map(url => ({ url }));\n\n// session tracking (unchanged)\nconst isThread = Boolean(event.thread_ts);\nconst session_id = isThread\n  ? `${event.user}:${event.thread_ts}`\n  : `${event.user}:top`;\n\n// return exactly one item with three arrays\nreturn [{\n  json: {\n    session_id,\n    user:       event.user,\n    text,\n    ts:         event.ts,\n    thread_ts:  event.thread_ts || null,\n    is_thread:  isThread,\n\n    audio,      // [ {...}, {...} ]  only audio/* files\n    others,     // [ {...}, {...} ]  every other mimetype\n    driveFiles  // [ {url}, {url} ]  each Drive/Docs link as its own object\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4896,
        608
      ],
      "id": "95b00eeb-dd76-4ca4-b11a-f1a8374a7001",
      "name": "Initial Processing"
    },
    {
      "parameters": {
        "jsCode": "// Grab files from the previous node (\"Process Other Files\")\nconst rawFiles = $json.files;\n\n// If it's a stringified JSON array (sometimes happens), parse it\nlet files;\nif (typeof rawFiles === 'string') {\n  try {\n    files = JSON.parse(rawFiles);\n  } catch (e) {\n    throw new Error(\"Failed to parse 'files' string as JSON.\");\n  }\n} else {\n  files = rawFiles;\n}\n\n// Check if we really have an array now\nif (!Array.isArray(files)) {\n  throw new Error(\"'files' is not an array.\");\n}\n\n// Split into one item per file\nreturn files.map(file => ({\n  json: file\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3904,
        656
      ],
      "id": "8c3a03fc-e474-4458-85d6-3362ac42fb57",
      "name": "Parse Links 1"
    },
    {
      "parameters": {
        "jsCode": "// Grab files from the previous node (\"Process Drive Links\")\nconst rawFiles = $json.files;\n\n// If it's a stringified JSON array (sometimes happens), parse it\nlet files;\nif (typeof rawFiles === 'string') {\n  try {\n    files = JSON.parse(rawFiles);\n  } catch (e) {\n    throw new Error(\"Failed to parse 'files' string as JSON.\");\n  }\n} else {\n  files = rawFiles;\n}\n\n// Check if we really have an array now\nif (!Array.isArray(files)) {\n  throw new Error(\"'files' is not an array.\");\n}\n\n// Split into one item per file\nreturn files.map(file => ({\n  json: file\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3904,
        848
      ],
      "id": "7fe5f6f4-95a0-4e19-b98c-5f4914f95abd",
      "name": "Parse Links 2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3728,
        496
      ],
      "id": "20520678-e958-4488-b76b-62978b02a6c4",
      "name": "Merge Text Input"
    },
    {
      "parameters": {
        "jsCode": "// Gather all \"text\" values from the input items\nconst texts = items.map(item => item.json.text || \"\");\n\n// Join with two line breaks (in order)\nconst combinedText = texts.join('\\n\\n');\n\n// Return as a single item with \"text\" property\nreturn [\n  {\n    json: {\n      text: combinedText\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3568,
        496
      ],
      "id": "f9102938-0f88-45df-847c-2c330601c16d",
      "name": "Combine Text Input"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3296,
        656
      ],
      "id": "ae20c371-c34f-4bd2-95ca-b5ecd4096f1d",
      "name": "Merge Text & Files"
    },
    {
      "parameters": {
        "jsCode": "// Initialize the output object\nconst output = {};\n\n// Loop through all incoming items and merge their keys into the output object\nfor (const item of items) {\n    for (const [key, value] of Object.entries(item.json)) {\n        output[key] = value;\n    }\n}\n\n// Return the output as a single item array (to keep n8n happy)\nreturn [{ json: output }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3104,
        656
      ],
      "id": "19e4530d-e2ca-4422-9993-f75f87d3f900",
      "name": "Combine Text & Files"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.others}}",
                    "rightValue": "image",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "60887514-aecc-427b-9885-d4e2426c5567"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Has Files"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2b158d3b-2ab9-41d0-a167-957cb545763b",
                    "leftValue": "={{ $('Initial Processing').item.json.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "61361d02-e119-4ba5-a2d2-dcf04bcea290",
                    "leftValue": "={{$json.driveFiles}}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Has Drive Links"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4448,
        848
      ],
      "id": "345452a4-80f5-4690-93fb-0ec7ae282706",
      "name": "Switch3"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_rodger_chat",
          "mode": "list",
          "cachedResultName": "n8n_rodger_chat"
        },
        "limit": 20,
        "where": {
          "values": [
            {
              "column": "session_id",
              "value": "={{ $json.session_id }}"
            }
          ]
        },
        "combineConditions": "OR",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2624,
        880
      ],
      "id": "4bfea221-2cd5-456b-ae96-07316e8f8a4c",
      "name": "Pull Thread Context",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "PsARREIXEOG7p5ku",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32c5f0ec-43b0-4165-816e-dd4e5c7fa682",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "2e1b6dce-0eb6-419a-a1d5-83b5ec000951",
              "name": "user",
              "value": "={{ $('Initial Processing').first().json.user }}",
              "type": "string"
            },
            {
              "id": "94c37bf0-fef3-43c6-9dc7-640ea037c3f4",
              "name": "ts",
              "value": "={{ $('Initial Processing').first().json.ts }}",
              "type": "string"
            },
            {
              "id": "b8b90c8c-a79f-4481-8efa-dfdb94fadff8",
              "name": "thread_ts",
              "value": "={{ $('Initial Processing').first().json.thread_ts }}",
              "type": "string"
            },
            {
              "id": "0144689f-7197-4893-9095-9411b749050e",
              "name": "session_id",
              "value": "={{ $('Initial Processing').first().json.session_id }}",
              "type": "string"
            },
            {
              "id": "39588b21-c950-43c6-b45f-90df4a65b343",
              "name": "files_timestamp",
              "value": "={{ $json[\"Message Timestamp\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2944,
        656
      ],
      "id": "d7ae985e-0937-40d2-a610-ad9a4976a5f0",
      "name": "Mini-Landmark"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "23381507-3da6-461d-91db-2a42a31bfa84",
              "leftValue": "={{ $json.session_id }}",
              "rightValue": "top",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2800,
        816
      ],
      "id": "4260820f-a90d-49c5-ba8b-5c04b86f40df",
      "name": "If session_id Has top"
    },
    {
      "parameters": {
        "jsCode": "const sessionId = items[0]?.json.session_id || null;\n\n// Step 1: Extract and sort messages by TimeAdded\nconst sortedItems = [...items].sort((a, b) => {\n    const aTime = a.json.message?.data?.TimeAdded || a.json.message?.data?.timeAdded;\n    const bTime = b.json.message?.data?.TimeAdded || b.json.message?.data?.timeAdded;\n    const aTimestamp = aTime ? new Date(aTime).getTime() : 0;\n    const bTimestamp = bTime ? new Date(bTime).getTime() : 0;\n    return aTimestamp - bTimestamp;\n});\n\n// Step 2: Prepare formatted message content and collect meta fields\nconst formattedMessages = [];\nconst addedContents = new Set();\n\nlet lastAddedAt = null;\nlet previousConversationChain = '';\n\n// Store most recent values\nlet files_ts = null;\n\nfor (let i = 0; i < sortedItems.length; i++) {\n    const item = sortedItems[i];\n    const data = item.json.message?.data || {};\n    const content = data.content;\n    const timeAdded = data.TimeAdded || data.timeAdded;\n    const chain = data.previousConversationChain;\n    const senderType = item.json.message?.type || 'human';\n\n    // Deduplicate content\n    if (content && !addedContents.has(content)) {\n        formattedMessages.push(`--- [${senderType}] Message ${formattedMessages.length + 1} ---\\n${content}`);\n        addedContents.add(content);\n    }\n\n    // Track most recent TimeAdded\n    if (timeAdded) {\n        const time = new Date(timeAdded).toISOString();\n        if (!lastAddedAt || new Date(time) > new Date(lastAddedAt)) {\n            lastAddedAt = time;\n        }\n    }\n\n    // Track conversation chain\n    if (chain && chain !== 'null') {\n        previousConversationChain = chain;\n    }\n\n    // Capture first available files_ts\n    if (!files_ts && (data.images_ts || data.files_ts)) {\n        files_ts = data.images_ts || data.files_ts;\n    }\n}\n\n// Fallback if no files_ts found\nif (!files_ts) {\n    files_ts = sortedItems[0]?.json.ts || null;\n}\n\nconst combined = formattedMessages.join('\\n\\n');\n\n// Final output\nreturn [\n    {\n        json: {\n            session_id: sessionId,\n            message: {\n                data: {\n                    content: combined,\n                    previousConversationChain: previousConversationChain || combined,\n                    lastAddedAt: lastAddedAt || new Date().toISOString(),\n                    files_ts: files_ts || null\n                }\n            }\n        }\n    }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2480,
        736
      ],
      "id": "ed05e5ae-f31a-40bc-a27b-d8b9c7e4ed5b",
      "name": "Combine All Context"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "session_id",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -2304,
        672
      ],
      "id": "503bca45-0099-4e91-a4cb-d939516ad578",
      "name": "Merge Context"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4928,
        1792
      ],
      "id": "144050ad-7d1a-4393-a1b9-a9256bd1a77a",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -5024,
        1312
      ],
      "id": "6c24b11e-2931-493a-ba0f-2a7f2e8c8c72",
      "name": "Aggregate3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "76d3e5d3-b183-4c84-8d17-1b17aafc0a70",
              "name": "file_link",
              "value": "={{ $json['File URL'] }}",
              "type": "string"
            },
            {
              "id": "ab9e1e14-1c44-4c57-82f6-7c30fd6425bc",
              "name": "style",
              "value": "={{ $('AI Agent').item.json.output.style }}",
              "type": "string"
            },
            {
              "id": "20b4f929-873a-468a-8d2c-de72eb67bf72",
              "name": "chart_content",
              "value": "={{ $('AI Agent').item.json.output.chart_content }}",
              "type": "string"
            },
            {
              "id": "b67c88a8-89fe-4ab0-960e-fe1b8e5485c9",
              "name": "key",
              "value": "key",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4096,
        1792
      ],
      "id": "dbc5032e-4798-40f1-9f74-7dbd29920b59",
      "name": "Process Spreadsheet Links"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a3fbda60-1199-4e83-9ff2-c6202e527a58",
              "name": "=text",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2560,
        1264
      ],
      "id": "4d38913d-ea51-46f0-9031-3c4ea3a828b0",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a3fbda60-1199-4e83-9ff2-c6202e527a58",
              "name": "=text",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2560,
        1456
      ],
      "id": "f0a1a122-a418-4d99-b016-47c56b8d04c9",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a3fbda60-1199-4e83-9ff2-c6202e527a58",
              "name": "=text",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2560,
        1664
      ],
      "id": "77379aca-1d00-4272-9d0d-1021d59f0034",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b0579963-3c80-4674-be42-faf7816c8417",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "ff3f9ee7-7963-49a5-ae9a-5e3b7ec22164",
              "name": "key",
              "value": "key",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2352,
        1664
      ],
      "id": "112072ff-5d14-41ed-a3bc-e356468ce19b",
      "name": "text_landmark"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "key",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2160,
        1792
      ],
      "id": "5d7876b5-227c-4344-b7a0-55f65f7217c3",
      "name": "Merge"
    },
    {
      "parameters": {
        "name": "={{ $('Edit Fields').item.json.title }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "18JZuMtJcDHEDKp4-G8FsYdDuk53KBVRv",
          "mode": "list",
          "cachedResultName": "Images For Test",
          "cachedResultUrl": "https://drive.google.com/drive/folders/18JZuMtJcDHEDKp4-G8FsYdDuk53KBVRv"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -832,
        1792
      ],
      "id": "e9757abf-c5c5-49f6-a0b8-a26a90652e34",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "6b09vfNjQ0BTsy8h",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4459a22e-05fe-41fb-a66c-b4f738f12651",
              "name": "title",
              "value": "={{ $('Edit Fields').item.json.title }}",
              "type": "string"
            },
            {
              "id": "a61a1c56-2713-4145-97eb-71298af76664",
              "name": "image_link",
              "value": "=https://drive.google.com/file/d/{{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        1792
      ],
      "id": "0935e003-aa4a-40e6-b945-428c3a27e694",
      "name": "Set Titles & Links"
    },
    {
      "parameters": {
        "trigger": [
          "any_event"
        ],
        "channelId": {
          "__rl": true,
          "value": "C08CE2WBQR3",
          "mode": "list",
          "cachedResultName": "patty_pa_input"
        },
        "options": {
          "resolveIds": true,
          "userIds": [
            "U08C7BMMZHD"
          ]
        }
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        -5072,
        608
      ],
      "id": "ef94ec47-59b7-43e9-9135-b2571bf02d6c",
      "name": "Slack Trigger",
      "webhookId": "eb0aafc2-a1bd-47d9-b738-993fb365d887",
      "credentials": {
        "slackApi": {
          "id": "ncQHsmHkvcVCSFNi",
          "name": "Patty_PA_Bot API"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"Orders by Region\",\n  \"config\": {\n    \"type\": \"bar\",\n    \"data\": {\n      \"labels\": [\"North\", \"East\", \"South\", \"West\"],\n      \"datasets\": [{\n        \"label\": \"Orders\",\n        \"data\": [14, null, 27, 20]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Orders by Region\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Region\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Orders\"\n          }\n        }]\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1520,
        1488
      ],
      "id": "5330ad4a-0346-4f14-a1a6-175a879673a4",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "url": "https://quickchart.io/chart",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "c",
              "value": "={{ JSON.stringify($json.config) }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        1792
      ],
      "id": "50ad303e-25c1-4d4d-8720-9e47b87b6ffb",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Spreadsheet Content:\n**********\n{{ $json.text }}\n**********\n\n**Style Of Chart Requested:** {{ $json.style }}\n\n**Chart Details Requested:** {{ $json.chart_content }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=<system_prompt>\n\nYOU ARE A QUICKCHART CONFIGURATION GENERATOR, SPECIALIZED IN PRODUCING JSON CONFIGS FOR **STANDARD VERTICAL BAR CHARTS** (type: \"bar\") USING QUICKCHART.IO'S SCHEMA.\n\n---\n\n## OBJECTIVE\n\n- RECEIVE:  \n  - A user’s chart request specifying a bar chart, with details on axes and series.\n  - Spreadsheet data (as columns and rows).\n- OUTPUT:  \n  - A single JSON object with:\n    - \"title\": (string) A concise, professional chart title.\n    - \"config\": (object) A valid QuickChart configuration object for a vertical bar chart (type: \"bar\").\n\n---\n\n## CHART REQUIREMENTS\n\n- **TYPE:** Always use `\"type\": \"bar\"` (vertical bars).\n- **LABELS:** Use the first column in the spreadsheet (or as directed by the user) as the x-axis labels.\n- **DATASETS:**  \n  - Each subsequent column (besides labels) is a separate dataset (series) to plot.\n  - The \"label\" of each dataset is the column header; the \"data\" array is the column’s values.\n  - Omit any empty or undefined data cells; use `null` where data is missing.\n\n---\n\n## CONFIG RULES\n\n- Structure config as follows:\n{\n  \"type\": \"bar\",\n  \"data\": {\n    \"labels\": [ ... ],          // x-axis categories\n    \"datasets\": [\n      {\n        \"label\": \"...\",         // series name\n        \"data\": [ ... ]         // y values\n      }\n      // (more datasets if present)\n    ]\n  },\n  \"options\": {\n    \"title\": {\n      \"display\": true,\n      \"text\": \"...\"             // human-readable title\n    },\n    \"scales\": {\n      \"xAxes\": [{\n        \"scaleLabel\": {\n          \"display\": true,\n          \"labelString\": \"...\"  // x-axis label (from user/chart_content if provided)\n        }\n      }],\n      \"yAxes\": [{\n        \"scaleLabel\": {\n          \"display\": true,\n          \"labelString\": \"...\"  // y-axis label (from user/chart_content if provided)\n        }\n      }]\n    }\n  }\n}\n\n- Include axis labels and chart title in `options` if specified by the user.\n- Do **not** include extraneous options, explanations, or styling unless requested.\n\n---\n\n## STRICT OUTPUT FORMAT\n\nAlways return:\n{\n  \"title\": \"...\",\n  \"config\": { ... }\n}\n\n- `\"title\"`: A concise human-readable summary of the chart.\n- `\"config\"`: The bar chart config as above.\n\n---\n\n## WHAT NOT TO DO\n\n- **DO NOT** use any chart type except `\"bar\"`.\n- **DO NOT** output data for horizontal, stacked, or other chart types.\n- **DO NOT** add, aggregate, or modify numbers.\n- **DO NOT** output anything except the required JSON object.\n- **DO NOT** explain your answer, add a prompt field, or provide commentary.\n- **DO NOT** ask for clarification or further info.\n\n---\n\n## EXAMPLES\n\n### Example 1\n\nInputs:  \nstyle: Bar Chart  \nchart_content: X axis should be months, y axis should be revenue  \nSpreadsheet data:  \nMonth,Revenue  \nJanuary,1200  \nFebruary,1350  \nMarch,1100  \nApril,1600  \n\nOutput:\n{\n  \"title\": \"Monthly Revenue\",\n  \"config\": {\n    \"type\": \"bar\",\n    \"data\": {\n      \"labels\": [\"January\", \"February\", \"March\", \"April\"],\n      \"datasets\": [{\n        \"label\": \"Revenue\",\n        \"data\": [1200, 1350, 1100, 1600]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Monthly Revenue\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Month\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Revenue\"\n          }\n        }]\n      }\n    }\n  }\n}\n\n---\n\n### Example 2\n\nInputs:  \nstyle: Bar Chart  \nchart_content: X axis is regions, y axis is number of orders  \nSpreadsheet data:  \nRegion,Orders  \nNorth,14  \nEast,  \nSouth,27  \nWest,20  \n\nOutput:\n{\n  \"title\": \"Orders by Region\",\n  \"config\": {\n    \"type\": \"bar\",\n    \"data\": {\n      \"labels\": [\"North\", \"East\", \"South\", \"West\"],\n      \"datasets\": [{\n        \"label\": \"Orders\",\n        \"data\": [14, null, 27, 20]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Orders by Region\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Region\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Orders\"\n          }\n        }]\n      }\n    }\n  }\n}\n\n---\n\n</system_prompt>"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -1776,
        1392
      ],
      "id": "04c5a8e6-45f4-4e5d-89de-bef21fa0a42c",
      "name": "Bar Chart"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"Employee Distribution by Department\",\n  \"config\": {\n    \"type\": \"pie\",\n    \"data\": {\n      \"labels\": [\"Sales\", \"Marketing\", \"Engineering\", \"Support\"],\n      \"datasets\": [{\n        \"label\": \"Employees\",\n        \"data\": [21, 13, 37, 9]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Employee Distribution by Department\"\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1520,
        1664
      ],
      "id": "6bb3f9f3-ec7c-4bc8-a30e-4a51e54a6e43",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"Units Sold by Category\",\n  \"config\": {\n    \"type\": \"doughnut\",\n    \"data\": {\n      \"labels\": [\"Books\", \"Games\", \"Toys\", \"Cards\"],\n      \"datasets\": [{\n        \"label\": \"Units Sold\",\n        \"data\": [230, 150, 320, 100]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Units Sold by Category\"\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1520,
        1840
      ],
      "id": "f4072b64-4c6c-45de-82f7-1c67d879ad7b",
      "name": "Structured Output Parser4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Spreadsheet Content:\n**********\n{{ $json.text }}\n**********\n\n**Style Of Chart Requested:** {{ $json.style }}\n\n**Chart Details Requested:** {{ $json.chart_content }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=<system_prompt>\n\nYOU ARE A QUICKCHART CONFIGURATION GENERATOR, SPECIALIZED IN PRODUCING JSON CONFIGS FOR **PIE CHARTS** (type: \"pie\") USING QUICKCHART.IO'S SCHEMA.\n\n---\n\n## OBJECTIVE\n\n- RECEIVE:\n  - A user’s chart request specifying a pie chart, with details on categories and values.\n  - Spreadsheet data (as columns and rows).\n- OUTPUT:\n  - A single JSON object with:\n    - \"title\": (string) A concise, professional chart title.\n    - \"config\": (object) A valid QuickChart configuration object for a pie chart (type: \"pie\").\n\n---\n\n## CHART REQUIREMENTS\n\n- **TYPE:** Always use `\"type\": \"pie\"`.\n- **LABELS:** Use the first column in the spreadsheet (or as directed by the user) as slice labels.\n- **DATASET:**\n  - Use the second column as the values for each slice.\n  - The \"label\" of the dataset is the column header for the values; the \"data\" array is the column’s values.\n  - Use `null` for any missing data.\n\n---\n\n## CONFIG RULES\n\n- Structure config as follows:\n{\n  \"type\": \"pie\",\n  \"data\": {\n    \"labels\": [ ... ],     // slice categories\n    \"datasets\": [\n      {\n        \"label\": \"...\",    // values column header\n        \"data\": [ ... ]    // slice values\n      }\n    ]\n  },\n  \"options\": {\n    \"title\": {\n      \"display\": true,\n      \"text\": \"...\"         // human-readable title\n    }\n  }\n}\n\n\n- Include chart title in `options.title` if specified by the user.\n- Do **not** include unnecessary options, styling, or explanations unless specified.\n\n---\n\n## STRICT OUTPUT FORMAT\n\nAlways return:\n{\n  \"title\": \"...\",\n  \"config\": { ... }\n}\n\n- `\"title\"`: A concise human-readable summary of the chart.\n- `\"config\"`: The pie chart config as above.\n\n---\n\n## WHAT NOT TO DO\n\n- **DO NOT** use any chart type except `\"pie\"`.\n- **DO NOT** output data for doughnut, bar, or other chart types.\n- **DO NOT** add, aggregate, or modify numbers.\n- **DO NOT** output anything except the required JSON object.\n- **DO NOT** explain your answer, add a prompt field, or provide commentary.\n- **DO NOT** ask for clarification or further info.\n\n---\n\n## EXAMPLES\n\n### Example 1\n\nInputs:  \nstyle: Pie Chart  \nchart_content: Show each department as a slice, with employee count as the value  \nSpreadsheet data:  \nDepartment,Employees  \nSales,21  \nMarketing,13  \nEngineering,37  \nSupport,9  \n\nOutput:\n{\n  \"title\": \"Employee Distribution by Department\",\n  \"config\": {\n    \"type\": \"pie\",\n    \"data\": {\n      \"labels\": [\"Sales\", \"Marketing\", \"Engineering\", \"Support\"],\n      \"datasets\": [{\n        \"label\": \"Employees\",\n        \"data\": [21, 13, 37, 9]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Employee Distribution by Department\"\n      }\n    }\n  }\n}\n\n---\n\n### Example 2\n\nInputs:  \nstyle: Pie Chart  \nchart_content: Each city as a slice, value is number of sales  \nSpreadsheet data:  \nCity,Sales  \nChicago,2300  \nAustin,1800  \nSeattle,2200  \nBoston,  \n\nOutput:\n{\n  \"title\": \"Sales by City\",\n  \"config\": {\n    \"type\": \"pie\",\n    \"data\": {\n      \"labels\": [\"Chicago\", \"Austin\", \"Seattle\", \"Boston\"],\n      \"datasets\": [{\n        \"label\": \"Sales\",\n        \"data\": [2300, 1800, 2200, null]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Sales by City\"\n      }\n    }\n  }\n}\n\n---\n\n</system_prompt>"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -1776,
        1568
      ],
      "id": "147ee399-ef25-4658-b90a-9364924c4e07",
      "name": "Pie Chart"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Spreadsheet Content:\n**********\n{{ $json.text }}\n**********\n\n**Style Of Chart Requested:** {{ $json.style }}\n\n**Chart Details Requested:** {{ $json.chart_content }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=<system_prompt>\n\nYOU ARE A QUICKCHART CONFIGURATION GENERATOR, SPECIALIZED IN PRODUCING JSON CONFIGS FOR **DOUGHNUT CHARTS** (type: \"doughnut\") USING QUICKCHART.IO'S SCHEMA.\n\n---\n\n## OBJECTIVE\n\n- RECEIVE:\n  - A user’s chart request specifying a doughnut chart, with details on categories and values.\n  - Spreadsheet data (as columns and rows).\n- OUTPUT:\n  - A single JSON object with:\n    - \"title\": (string) A concise, professional chart title.\n    - \"config\": (object) A valid QuickChart configuration object for a doughnut chart (type: \"doughnut\").\n\n---\n\n## CHART REQUIREMENTS\n\n- **TYPE:** Always use `\"type\": \"doughnut\"`.\n- **LABELS:** Use the first column in the spreadsheet (or as directed by the user) as slice labels.\n- **DATASET:**\n  - Use the second column as the values for each slice.\n  - The \"label\" of the dataset is the column header for the values; the \"data\" array is the column’s values.\n  - Use `null` for any missing data.\n\n---\n\n## CONFIG RULES\n\n- Structure config as follows:\n{\n  \"type\": \"doughnut\",\n  \"data\": {\n    \"labels\": [ ... ],     // slice categories\n    \"datasets\": [\n      {\n        \"label\": \"...\",    // values column header\n        \"data\": [ ... ]    // slice values\n      }\n    ]\n  },\n  \"options\": {\n    \"title\": {\n      \"display\": true,\n      \"text\": \"...\"         // human-readable title\n    }\n  }\n}\n\n- Include chart title in `options.title` if specified by the user.\n- Do **not** include unnecessary options, styling, or explanations unless specified.\n\n---\n\n## STRICT OUTPUT FORMAT\n\nAlways return:\n{\n  \"title\": \"...\",\n  \"config\": { ... }\n}\n\n- `\"title\"`: A concise human-readable summary of the chart.\n- `\"config\"`: The doughnut chart config as above.\n\n---\n\n## WHAT NOT TO DO\n\n- **DO NOT** use any chart type except `\"doughnut\"`.\n- **DO NOT** output data for pie, bar, or other chart types.\n- **DO NOT** add, aggregate, or modify numbers.\n- **DO NOT** output anything except the required JSON object.\n- **DO NOT** explain your answer, add a prompt field, or provide commentary.\n- **DO NOT** ask for clarification or further info.\n\n---\n\n## EXAMPLES\n\n### Example 1\n\nInputs:  \nstyle: Doughnut Chart  \nchart_content: Each product category as a slice, value is units sold  \nSpreadsheet data:  \nCategory,Units Sold  \nBooks,230  \nGames,150  \nToys,320  \nCards,100  \n\nOutput:\n{\n  \"title\": \"Units Sold by Category\",\n  \"config\": {\n    \"type\": \"doughnut\",\n    \"data\": {\n      \"labels\": [\"Books\", \"Games\", \"Toys\", \"Cards\"],\n      \"datasets\": [{\n        \"label\": \"Units Sold\",\n        \"data\": [230, 150, 320, 100]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Units Sold by Category\"\n      }\n    }\n  }\n}\n\n\n---\n\n### Example 2\n\nInputs:  \nstyle: Doughnut Chart  \nchart_content: Department slices, value is headcount  \nSpreadsheet data:  \nDepartment,Headcount  \nSales,50  \nHR,10  \nDevelopment,40  \nSupport,  \n\nOutput:\n{\n  \"title\": \"Headcount by Department\",\n  \"config\": {\n    \"type\": \"doughnut\",\n    \"data\": {\n      \"labels\": [\"Sales\", \"HR\", \"Development\", \"Support\"],\n      \"datasets\": [{\n        \"label\": \"Headcount\",\n        \"data\": [50, 10, 40, null]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Headcount by Department\"\n      }\n    }\n  }\n}\n\n\n---\n\n</system_prompt>"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -1776,
        1744
      ],
      "id": "5e82a27b-f640-4e17-bb73-783727cfe674",
      "name": "Doughnut Chart"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"Spending by Age and Gender (Bubble Size = Visits)\",\n  \"config\": {\n    \"type\": \"bubble\",\n    \"data\": {\n      \"datasets\": [\n        {\n          \"label\": \"Male\",\n          \"data\": [\n            { \"x\": 25, \"y\": 500, \"r\": 10 },\n            { \"x\": 28, \"y\": 600, \"r\": 12 }\n          ]\n        },\n        {\n          \"label\": \"Female\",\n          \"data\": [\n            { \"x\": 30, \"y\": 700, \"r\": 13 },\n            { \"x\": 32, \"y\": 900, \"r\": 16 }\n          ]\n        }\n      ]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Spending by Age and Gender (Bubble Size = Visits)\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"type\": \"linear\",\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Age\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Spending\"\n          }\n        }]\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1520,
        2032
      ],
      "id": "c4b76ca3-cb48-4de1-96ea-bd2c6a31ce98",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Spreadsheet Content:\n**********\n{{ $json.text }}\n**********\n\n**Style Of Chart Requested:** {{ $json.style }}\n\n**Chart Details Requested:** {{ $json.chart_content }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=<system_prompt>\n\nYOU ARE A QUICKCHART CONFIGURATION GENERATOR, SPECIALIZED IN PRODUCING JSON CONFIGS FOR **BUBBLE CHARTS** (type: \"bubble\") USING QUICKCHART.IO'S SCHEMA.\n\n---\n\n## OBJECTIVE\n\n- RECEIVE:\n  - A user’s chart request specifying a bubble chart, with details on x, y, and bubble size (r) values (and series if present).\n  - Spreadsheet data (as columns and rows).\n- OUTPUT:\n  - A single JSON object with:\n    - \"title\": (string) A concise, professional chart title.\n    - \"config\": (object) A valid QuickChart configuration object for a bubble chart (type: \"bubble\").\n\n---\n\n## CHART REQUIREMENTS\n\n- **TYPE:** Always use `\"type\": \"bubble\"`.\n- **DATA:**\n  - For a single series: Use the first column for x-values, the second for y-values, the third for bubble radius (`r`).\n  - For multiple series: If data contains a fourth column (e.g., \"Series\"), group points into separate datasets by that series.\n  - Each data point must be formatted as `{ \"x\": value, \"y\": value, \"r\": value }`.\n  - The \"label\" of each dataset should reflect the series name, if applicable.\n  - Use `null` for missing x, y, or r values.\n\n---\n\n## CONFIG RULES\n\n- Structure config as follows:\n{\n  \"type\": \"bubble\",\n  \"data\": {\n    \"datasets\": [\n      {\n        \"label\": \"...\",                // Series name or generic if only one\n        \"data\": [ { \"x\": ..., \"y\": ..., \"r\": ... }, ... ] // List of bubbles\n      }\n      // More datasets if more series\n    ]\n  },\n  \"options\": {\n    \"title\": {\n      \"display\": true,\n      \"text\": \"...\"                  // human-readable title\n    },\n    \"scales\": {\n      \"xAxes\": [{\n        \"type\": \"linear\",\n        \"scaleLabel\": {\n          \"display\": true,\n          \"labelString\": \"...\"       // x-axis label from user/chart_content if provided\n        }\n      }],\n      \"yAxes\": [{\n        \"scaleLabel\": {\n          \"display\": true,\n          \"labelString\": \"...\"       // y-axis label from user/chart_content if provided\n        }\n      }]\n    }\n  }\n}\n\n- Include axis labels and chart title in `options` if specified by the user.\n- Do **not** include unnecessary options, styling, or explanations unless specified.\n\n---\n\n## STRICT OUTPUT FORMAT\n\nAlways return:\n{\n  \"title\": \"...\",\n  \"config\": { ... }\n}\n\n- `\"title\"`: A concise human-readable summary of the chart.\n- `\"config\"`: The bubble chart config as above.\n\n---\n\n## WHAT NOT TO DO\n\n- **DO NOT** use any chart type except `\"bubble\"`.\n- **DO NOT** output data for scatter, bar, or other chart types.\n- **DO NOT** add, aggregate, or modify numbers.\n- **DO NOT** output anything except the required JSON object.\n- **DO NOT** explain your answer, add a prompt field, or provide commentary.\n- **DO NOT** ask for clarification or further info.\n\n---\n\n## EXAMPLES\n\n### Example 1 (Single Series)\n\nInputs:  \nstyle: Bubble Chart  \nchart_content: Plot population (x) vs GDP (y), bubble size by area  \nSpreadsheet data:  \nPopulation,GDP,Area  \n20,500,30  \n40,1200,55  \n60,1700,80  \n\nOutput:\n{\n  \"title\": \"GDP vs Population (Bubble Size by Area)\",\n  \"config\": {\n    \"type\": \"bubble\",\n    \"data\": {\n      \"datasets\": [{\n        \"label\": \"GDP vs Population\",\n        \"data\": [\n          { \"x\": 20, \"y\": 500, \"r\": 30 },\n          { \"x\": 40, \"y\": 1200, \"r\": 55 },\n          { \"x\": 60, \"y\": 1700, \"r\": 80 }\n        ]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"GDP vs Population (Bubble Size by Area)\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"type\": \"linear\",\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Population\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"GDP\"\n          }\n        }]\n      }\n    }\n  }\n}\n\n\n---\n\n### Example 2 (Multiple Series)\n\nInputs:  \nstyle: Bubble Chart  \nchart_content: x = age, y = spending, r = visits, group by gender  \nSpreadsheet data:  \nAge,Spending,Visits,Gender  \n25,500,10,Male  \n30,700,13,Female  \n28,600,12,Male  \n32,900,16,Female  \n\nOutput:\n{\n  \"title\": \"Spending by Age and Gender (Bubble Size = Visits)\",\n  \"config\": {\n    \"type\": \"bubble\",\n    \"data\": {\n      \"datasets\": [\n        {\n          \"label\": \"Male\",\n          \"data\": [\n            { \"x\": 25, \"y\": 500, \"r\": 10 },\n            { \"x\": 28, \"y\": 600, \"r\": 12 }\n          ]\n        },\n        {\n          \"label\": \"Female\",\n          \"data\": [\n            { \"x\": 30, \"y\": 700, \"r\": 13 },\n            { \"x\": 32, \"y\": 900, \"r\": 16 }\n          ]\n        }\n      ]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Spending by Age and Gender (Bubble Size = Visits)\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"type\": \"linear\",\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Age\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Spending\"\n          }\n        }]\n      }\n    }\n  }\n}\n\n\n---\n\n</system_prompt>"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -1776,
        1936
      ],
      "id": "7726c798-92b4-469f-abb9-b16857826347",
      "name": "Bubble Chart"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title\": \"Population by Country and Year\",\n  \"config\": {\n    \"type\": \"line\",\n    \"data\": {\n      \"labels\": [\"2018\", \"2019\", \"2020\", \"2021\"],\n      \"datasets\": [\n        {\n          \"label\": \"USA\",\n          \"data\": [320, 325, 330, 335]\n        },\n        {\n          \"label\": \"Canada\",\n          \"data\": [36, 37, 38, 39]\n        },\n        {\n          \"label\": \"Mexico\",\n          \"data\": [125, 127, 129, 131]\n        }\n      ]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Population by Country and Year\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Year\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Population\"\n          }\n        }]\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1520,
        2256
      ],
      "id": "befc78c3-dfae-42ca-b817-204365300468",
      "name": "Structured Output Parser9"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Spreadsheet Content:\n**********\n{{ $json.text }}\n**********\n\n**Style Of Chart Requested:** {{ $json.style }}\n\n**Chart Details Requested:** {{ $json.chart_content }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=<system_prompt>\n\nYOU ARE A QUICKCHART CONFIGURATION GENERATOR, SPECIALIZED IN PRODUCING JSON CONFIGS FOR **LINE GRAPHS** (type: \"line\") USING QUICKCHART.IO'S SCHEMA.\n\n---\n\n## OBJECTIVE\n\n- RECEIVE:\n  - A user’s chart request specifying a line graph, with details on x and y axes (and series if present).\n  - Spreadsheet data (as columns and rows).\n- OUTPUT:\n  - A single JSON object with:\n    - \"title\": (string) A concise, professional chart title.\n    - \"config\": (object) A valid QuickChart configuration object for a line graph (`type: \"line\"`).\n\n---\n\n## CHART REQUIREMENTS\n\n- **TYPE:** Always use `\"type\": \"line\"`.\n- **LABELS:** Use the first column in the spreadsheet (or as directed by the user) as the x-axis labels.\n- **DATASETS:**\n  - Each subsequent column is a separate dataset (series).\n  - The \"label\" of each dataset is the column header; the \"data\" array is the column’s values.\n  - Use `null` for any missing data.\n\n---\n\n## CONFIG RULES\n\n- Structure config as follows:\n{\n  \"type\": \"line\",\n  \"data\": {\n    \"labels\": [ ... ],          // x-axis categories\n    \"datasets\": [\n      {\n        \"label\": \"...\",         // series name\n        \"data\": [ ... ]         // y values\n      }\n      // More datasets if present\n    ]\n  },\n  \"options\": {\n    \"title\": {\n      \"display\": true,\n      \"text\": \"...\"             // human-readable title\n    },\n    \"scales\": {\n      \"xAxes\": [{\n        \"scaleLabel\": {\n          \"display\": true,\n          \"labelString\": \"...\"  // x-axis label (from user/chart_content if provided)\n        }\n      }],\n      \"yAxes\": [{\n        \"scaleLabel\": {\n          \"display\": true,\n          \"labelString\": \"...\"  // y-axis label (from user/chart_content if provided)\n        }\n      }]\n    }\n  }\n}\n\n- Include axis labels and chart title as shown, or as directed by the user.\n- Do **not** include unnecessary options, styling, or explanations unless specified.\n\n---\n\n## STRICT OUTPUT FORMAT\n\nAlways return:\n{\n  \"title\": \"...\",\n  \"config\": { ... }\n}\n\n- `\"title\"`: A concise human-readable summary of the chart.\n- `\"config\"`: The line graph config as above.\n\n---\n\n## WHAT NOT TO DO\n\n- **DO NOT** use any chart type except `\"line\"`.\n- **DO NOT** output data for bar, pie, or other chart types.\n- **DO NOT** add, aggregate, or modify numbers.\n- **DO NOT** output anything except the required JSON object.\n- **DO NOT** explain your answer, add a prompt field, or provide commentary.\n- **DO NOT** ask for clarification or further info.\n\n---\n\n## EXAMPLES\n\n### Example 1\n\nInputs:  \nstyle: Line Graph  \nchart_content: X axis should be months, y axis should be sales  \nSpreadsheet data:  \nMonth,Sales  \nJanuary,120  \nFebruary,150  \nMarch,170  \nApril,160  \n\nOutput:\n{\n  \"title\": \"Sales by Month\",\n  \"config\": {\n    \"type\": \"line\",\n    \"data\": {\n      \"labels\": [\"January\", \"February\", \"March\", \"April\"],\n      \"datasets\": [{\n        \"label\": \"Sales\",\n        \"data\": [120, 150, 170, 160]\n      }]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Sales by Month\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Month\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Sales\"\n          }\n        }]\n      }\n    }\n  }\n}\n\n\n---\n\n### Example 2 (Multiple Series)\n\nInputs:  \nstyle: Line Graph  \nchart_content: X axis should be year, y axis should be population for each country  \nSpreadsheet data:  \nYear,USA,Canada,Mexico  \n2018,320,36,125  \n2019,325,37,127  \n2020,330,38,129  \n2021,335,39,131  \n\nOutput:\n{\n  \"title\": \"Population by Country and Year\",\n  \"config\": {\n    \"type\": \"line\",\n    \"data\": {\n      \"labels\": [\"2018\", \"2019\", \"2020\", \"2021\"],\n      \"datasets\": [\n        {\n          \"label\": \"USA\",\n          \"data\": [320, 325, 330, 335]\n        },\n        {\n          \"label\": \"Canada\",\n          \"data\": [36, 37, 38, 39]\n        },\n        {\n          \"label\": \"Mexico\",\n          \"data\": [125, 127, 129, 131]\n        }\n      ]\n    },\n    \"options\": {\n      \"title\": {\n        \"display\": true,\n        \"text\": \"Population by Country and Year\"\n      },\n      \"scales\": {\n        \"xAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Year\"\n          }\n        }],\n        \"yAxes\": [{\n          \"scaleLabel\": {\n            \"display\": true,\n            \"labelString\": \"Population\"\n          }\n        }]\n      }\n    }\n  }\n}\n\n\n---\n\n</system_prompt>"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -1776,
        2144
      ],
      "id": "9e84b477-443b-49ec-9f02-92664a117d6a",
      "name": "Line Graph"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $('Process Spreadsheet Links').item.json.style }}",
                    "rightValue": "bar",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Bar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f53caf8b-7a8f-4d1e-98f4-deaf0e0171f0",
                    "leftValue": "={{ $('Process Spreadsheet Links').item.json.style }}",
                    "rightValue": "pie",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Pie"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "1ade7ece-47fe-47a8-8a81-16284388dace",
                    "leftValue": "={{ $('Process Spreadsheet Links').item.json.style }}",
                    "rightValue": "doughnut",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Doughnut"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "da138a8d-af57-4800-abaf-1e0a6c74bda5",
                    "leftValue": "={{ $('Process Spreadsheet Links').item.json.style }}",
                    "rightValue": "bubble",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Bubble"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "041cb97c-db05-4626-87b7-ad0493c7bda8",
                    "leftValue": "={{ $('Process Spreadsheet Links').item.json.style }}",
                    "rightValue": "line",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Line"
            }
          ]
        },
        "options": {}
      },
      "id": "d4db37f6-2d83-4b7a-b171-ea0e1140ac0f",
      "name": "Switch4",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -1952,
        1744
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9040d438-7404-49cd-b87e-81b6fc63e1cf",
              "name": "title",
              "value": "={{ $json.output.title }}",
              "type": "string"
            },
            {
              "id": "18682606-1d73-4b96-b245-de343a0c6c57",
              "name": "config",
              "value": "={{ $json.output.config }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1232,
        1792
      ],
      "id": "ec1eb6f2-dd8b-4b84-a0b5-0992adb0c413",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "content": "# File Uploads",
        "height": 756,
        "width": 3152
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5168,
        320
      ],
      "typeVersion": 1,
      "id": "008334de-6aed-4d45-ae13-05800a413003",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Set Data & Confirm",
        "height": 756,
        "width": 1392,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2000,
        320
      ],
      "typeVersion": 1,
      "id": "c38a3660-ea01-44e8-ade2-23f66ff33f6c",
      "name": "Sticky Note32"
    },
    {
      "parameters": {
        "content": "# Respond To User",
        "height": 548,
        "width": 1184,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5168,
        1104
      ],
      "typeVersion": 1,
      "id": "caf8b12a-4b12-4775-8af2-271bdaa44d52",
      "name": "Sticky Note33"
    },
    {
      "parameters": {
        "content": "# Create Chart",
        "height": 1332,
        "width": 3504,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3968,
        1104
      ],
      "typeVersion": 1,
      "id": "dab59b5b-7d26-48a9-a0f9-6c8b43a21de3",
      "name": "Sticky Note34"
    }
  ],
  "pinData": {
    "Slack Trigger": [
      {
        "json": {
          "user": "U08CK2TKQFN",
          "type": "message",
          "ts": "1752860861.608599",
          "client_msg_id": "c5da635b-bdd1-4a01-9270-3d71565ca2b9",
          "text": "yes, please proceed",
          "team": "T08C21180HM",
          "thread_ts": "1752860291.662279",
          "parent_user_id": "U08CK2TKQFN",
          "blocks": [
            {
              "type": "rich_text",
              "block_id": "J7x3z",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "yes, please proceed"
                    }
                  ]
                }
              ]
            }
          ],
          "channel": "C08CE2WBQR3",
          "event_ts": "1752860861.608599",
          "channel_type": "channel",
          "user_resolved": "bradford",
          "channel_resolved": "patty_pa_input"
        }
      }
    ]
  },
  "connections": {
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Summarize1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize1": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Download File2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download File7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Aggregate2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate2": {
      "main": [
        [
          {
            "node": "Summarize2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize2": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Let User Know Upload Complete": {
      "main": [
        [
          {
            "node": "Message: User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Thread Memory Session14": {
      "main": [
        [
          {
            "node": "Update Thread Memory Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File2": {
      "main": [
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File3": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File4": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File5": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File7": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message: User": {
      "main": [
        [
          {
            "node": "Update Thread Memory Session14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4.1-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Let User Know Upload Complete",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Review and approval",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Bar Chart",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Line Graph",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Bubble Chart",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Doughnut Chart",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Pie Chart",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Review and approval",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message: User 1": {
      "main": [
        [
          {
            "node": "Update Thread Memory Session6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Thread Memory Session6": {
      "main": [
        [
          {
            "node": "Update Thread Memory Session1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Landmark": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Review and approval": {
      "main": [
        [
          {
            "node": "Message: User 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Merge Text Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Process Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Other Files",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Drive Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If audio": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Other Files": {
      "main": [
        [
          {
            "node": "Parse Links 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Drive Links": {
      "main": [
        [
          {
            "node": "Parse Links 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Text": {
      "main": [
        [
          {
            "node": "Merge Text Input",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Process Audio": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Files": {
      "main": [
        [
          {
            "node": "Merge Text & Files",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Log Drive Links": {
      "main": [
        [
          {
            "node": "Merge Text & Files",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Initial Processing": {
      "main": [
        [
          {
            "node": "If audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Links 1": {
      "main": [
        [
          {
            "node": "Log Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Links 2": {
      "main": [
        [
          {
            "node": "Log Drive Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Text Input": {
      "main": [
        [
          {
            "node": "Combine Text Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Text Input": {
      "main": [
        [
          {
            "node": "Merge Text & Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Text & Files": {
      "main": [
        [
          {
            "node": "Combine Text & Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Process Other Files",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Drive Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Text & Files": {
      "main": [
        [
          {
            "node": "Mini-Landmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pull Thread Context": {
      "main": [
        [
          {
            "node": "Combine All Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mini-Landmark": {
      "main": [
        [
          {
            "node": "Merge Context",
            "type": "main",
            "index": 0
          },
          {
            "node": "If session_id Has top",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If session_id Has top": {
      "main": [
        [
          {
            "node": "Combine All Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Pull Thread Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine All Context": {
      "main": [
        [
          {
            "node": "Merge Context",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Context": {
      "main": [
        [
          {
            "node": "Landmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Spreadsheet Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate3": {
      "main": [
        [
          {
            "node": "Let User Know Upload Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Spreadsheet Links": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "text_landmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "text_landmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "text_landmark",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "text_landmark": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Switch4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Set Titles & Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Titles & Links": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Initial Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Bar Chart",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bar Chart": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Pie Chart",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Doughnut Chart",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "Bubble Chart",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser9": {
      "ai_outputParser": [
        [
          {
            "node": "Line Graph",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Switch4": {
      "main": [
        [
          {
            "node": "Bar Chart",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Pie Chart",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Doughnut Chart",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Bubble Chart",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Line Graph",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pie Chart": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Doughnut Chart": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bubble Chart": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Line Graph": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "515b5b19-5433-4642-b7ea-507c6dcee7df",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "755f8e384ae78a7dedbf592ffbd1a01c56d86a07241ef8bcfb307935a604c790"
  },
  "id": "ZrgBqqe7fgZDzEbC",
  "tags": [
    {
      "createdAt": "2025-03-10T21:36:47.226Z",
      "updatedAt": "2025-03-10T21:36:47.226Z",
      "id": "aFiyGtZ7jL976uPD",
      "name": "Free Giveaways"
    }
  ]
}